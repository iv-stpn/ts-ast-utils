name: Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.check-changes.outputs.code }}
      docs-only: ${{ steps.check-changes.outputs.docs-only }}
      should-test: ${{ steps.should-test.outputs.result }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if this is a version bump commit
        id: version-check
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"Version Packages"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"chore: version packages"* ]] || \
             [[ "${{ github.event.commits[0].author.name }}" == "github-actions[bot]" ]]; then
            echo "is-version-commit=true" >> $GITHUB_OUTPUT
          else
            echo "is-version-commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Check file changes
        id: check-changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'src/**'
              - 'test/**'
              - 'package.json'
              - 'bun.lockb'
              - 'tsconfig.json'
              - 'biome.json'
            docs-only:
              - 'README.md'
              - 'docs/**'
              - '*.md'
              - '.changeset/**'
              - '.github/workflows/**'
              - '.gitignore'
              - 'LICENSE'

      - name: Determine if tests should run
        id: should-test
        run: |
          if [[ "${{ steps.version-check.outputs.is-version-commit }}" == "true" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            echo "Skipping tests - version commit detected"
          elif [[ "${{ steps.check-changes.outputs.code }}" == "false" && "${{ steps.check-changes.outputs.docs-only }}" == "true" ]]; then
            echo "result=false" >> $GITHUB_OUTPUT
            echo "Skipping tests - only docs/config changed"
          else
            echo "result=true" >> $GITHUB_OUTPUT
            echo "Running tests - code changes detected"
          fi

  lint-typecheck:
    name: Lint & Typecheck
    needs: check-changes
    if: needs.check-changes.outputs.should-test == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint
        run: bun run lint

      - name: Typecheck
        run: bun run typecheck

      - name: Build
        run: bun run build

  tests:
    name: Tests
    needs: check-changes
    if: needs.check-changes.outputs.should-test == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun test

  release:
    needs: [check-changes, lint-typecheck, tests]
    name: Release
    runs-on: ubuntu-latest
    # Only run release on main branch pushes, not PRs
    # Skip if tests were skipped due to no code changes
    if: |
      always() &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (needs.check-changes.outputs.should-test == 'false' ||
       (needs.lint-typecheck.result == 'success' && needs.tests.result == 'success'))
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate proper changelogs
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Build Package
        run: bun run build

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This will either:
          # 1. Create a "Version Packages" PR if there are pending changesets
          # 2. Publish to npm if the "Version Packages" PR is merged
          publish: bun run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify on publish
        if: steps.changesets.outputs.published == 'true'
        run: echo "ðŸš€ A new version of ts-ast-utils was published!"
